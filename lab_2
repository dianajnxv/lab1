from datetime import datetime

DATABASE = list()
USER_SCHEME = ("id", "first_name", "second_name", "email", "password")
RECORD_SCHEME = ("id", "date", "content", "user", "title")
ENTITIES = ('User', 'Record')

def _get_entity(s: str) -> str:
    """Gets named entity ('User' or 'Record') from string."""
    for entity in ENTITIES:
        if entity in s:
            return entity
    return ""

def _get_field_value(entity_string: str, field: str) -> str:
    """Gets the value of a specific field from the entity string."""
    if field + "=" in entity_string:
        idx = entity_string.index(field + "=")
        search_index = idx + len(field + '=')

        i = search_index
        sub_string = ""
        while i < len(entity_string) and entity_string[i] != ',':
            sub_string += entity_string[i]
            i += 1
        return sub_string
    return None

def parse_string(string: str) -> dict:
    """Parses input string representing User or Record entity."""
    entity_type = _get_entity(s=string)
    parsed_entity = {}

    if entity_type == ENTITIES[0]:  # User
        parsed_entity[entity_type.lower()] = {}
        for item in USER_SCHEME:
            field_value = _get_field_value(string, item)
            if field_value is not None:
                parsed_entity[entity_type.lower()][item] = field_value

        # Example: Hash the password
        if 'password' in parsed_entity[entity_type.lower()]:
            parsed_entity[entity_type.lower()]['password'] = hash(parsed_entity[entity_type.lower()]['password'])

    elif entity_type == ENTITIES[1]:  # Record
        parsed_entity[entity_type.lower()] = {}
        for item in RECORD_SCHEME:
            field_value = _get_field_value(string, item)
            if field_value is not None:
                if item == 'date':
                    field_value = datetime.strptime(field_value, "%d.%m.%Y")  # Assuming date format
                parsed_entity[entity_type.lower()][item] = field_value

    return parsed_entity

def create_user(user: str) -> dict:
    """Creates a user and adds it to the DATABASE."""
    parsed_user = parse_string(user)

    # Assuming the parsed_user has a valid structure
    if parsed_user:
        # Hash the password before appending to the DATABASE
        if 'password' in parsed_user.get('user', {}):
            parsed_user['user']['password'] = hash(parsed_user['user']['password'])
        DATABASE.append(parsed_user)
        return parsed_user

    return {}

def create_record(record: str) -> dict:
    """Creates a record and adds it to the DATABASE."""
    parsed_record = parse_string(record)

    # Assuming the parsed_record has a valid structure
    if parsed_record:
        DATABASE.append(parsed_record)
        return parsed_record

    return {}

def read_user(user_id: int) -> dict:
    """Reads a user from the DATABASE based on the user ID."""
    for entity in DATABASE:
        if 'user' in entity and 'id' in entity['user'] and entity['user']['id'] == user_id:
            return entity['user']
    return {}

def read_record(record_id: int) -> dict:
    """Reads a record from the DATABASE based on the record ID."""
    for entity in DATABASE:
        if 'record' in entity and 'id' in entity['record'] and entity['record']['id'] == record_id:
            return entity['record']
    return {}

def delete_user(user_id: int) -> bool:
    """Deletes a user from the DATABASE based on the user ID."""
    for entity in DATABASE:
        if 'user' in entity and 'id' in entity['user'] and entity['user']['id'] == user_id:
            DATABASE.remove(entity)
            return True
    return False

def delete_record(record_id: int) -> bool:
    """Deletes a record from the DATABASE based on the record ID."""
    for entity in DATABASE:
        if 'record' in entity and 'id' in entity['record'] and entity['record']['id'] == record_id:
            DATABASE.remove(entity)
            return True
    return False

def print_menu():
    print("\nMenu:")
    print("1. Create User")
    print("2. Create Record")
    print("3. Read User")
    print("4. Read Record")
    print("5. Delete User")
    print("6. Delete Record")
    print("7. Exit")

while True:
    print_menu()
    choice = input("Enter your choice (1-7): ")

    if choice == '1':
        user_string = input("Enter user information: ")
        print("Entered User String:", user_string)
        create_user(user_string)
    elif choice == '2':
        record_string = input("Enter record information: ")
        create_record(record_string)
    elif choice == '3':
        user_id = int(input("Enter user ID to read: "))
        print("Read User:", read_user(user_id))
    elif choice == '4':
        record_id = int(input("Enter record ID to read: "))
        print("Read Record:", read_record(record_id))
    elif choice == '5':
        user_id = int(input("Enter user ID to delete: "))
        delete_user_result = delete_user(user_id)
        print("Delete User Result:", delete_user_result)
    elif choice == '6':
        record_id = int(input("Enter record ID to delete: "))
        delete_record_result = delete_record(record_id)
        print("Delete Record Result:", delete_record_result)
    elif choice == '7':
        break
    else:
        print("Invalid choice. Please enter a number between 1 and 7.")
